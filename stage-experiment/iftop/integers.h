//BBN_LICENSE_START -- DO NOT MODIFY BETWEEN LICENSE_{START,END} Lines
// Copyright (c) <2017,2018,2019,2020,2021>, <Raytheon BBN Technologies>
// To be applied to the DCOMP/MAP Public Source Code Release dated 2018-04-19, with
// the exception of the dcop implementation identified below (see notes).
// 
// Dispersed Computing (DCOMP)
// Mission-oriented Adaptive Placement of Task and Data (MAP) 
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
// Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//BBN_LICENSE_END
/*
 * integers.h:
 * This header file ensures that we have u_int<n>_t types of the proper width,
 * using a rather convoluted set of conditionals generated by configure. This
 * is an almighty pain in the arse, and is completely irrelevant on most
 * systems which already define this stuff.
 *
 * $Id$
 *
 */

#ifndef __INTEGERS_H_ /* include guard */
#define __INTEGERS_H_

#include <sys/types.h>
#include "config.h"

#if SIZEOF_U_INT8_T != 1 || SIZEOF_U_INT16_T != 2 || SIZEOF_U_INT32_T != 4

#   if defined(HAVE_C99_INTS)
        
        /* 
         * Use the C99 standard-width integers, defined in some appropriate
         * header file.
         */

#       if defined(HAVE_STDINT_H)
#           include <stdint.h>
#       elif defined(HAVE_SYS_INTTYPES_H)
#           include <sys/inttypes.h>
#       endif

        /* Don't replace existing u_int<n>_t types. */
#       if SIZEOF_U_INT8_T != 1
            typedef uint8_t u_int8_t;
#       endif

#       if SIZEOF_U_INT16_T != 2
            typedef uint16_t u_int16_t;
#       endif

#       if SIZEOF_U_INT32_T != 4
            typedef uint32_t u_int32_t;
#       endif

#   elif (SIZEOF_UNSIGNED_SHORT_INT == 2 || SIZEOF_UNSIGNED_INT == 2)    \
          && (SIZEOF_UNSIGNED_INT == 4 || SIZEOF_UNSIGNED_LONG_INT == 4)
    
        /*
         * Use an appropriately-sized basic type.
         */
    
#       if SIZEOF_U_INT8_T != 1
            typedef unsigned char u_int8_t;         /* By definition. */
#       endif

#       if SIZEOF_U_INT16_T != 2
#           if SIZEOF_UNSIGNED_SHORT_INT == 2
                typedef unsigned short int u_int16_t;
#           elif SIZEOF_UNSIGNED_INT == 2
                typedef unsigned int u_int16_t;     /* Not likely. */
#           endif
#       endif

#       if SIZEOF_U_INT32_T != 4
#           if SIZEOF_UNSIGNED_INT == 4
                typedef unsigned int u_int32_t;
#           elif SIZEOF_UNSIGNED_LONG_INT == 4
                typedef unsigned long int u_int32_t;
#           endif
#       endif

        /* Whew. */

#   else
#       error "Your C compiler seems to lack 16 and 32 bit unsigned integer types"
#   endif

#endif /* No existing u_int<n>_t types. */

#endif /* __INTEGERS_H_ */
