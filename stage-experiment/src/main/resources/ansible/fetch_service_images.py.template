#!/usr/bin/env python3

import warnings
with warnings.catch_warnings():
    import re
    import sys
    import argparse
    import os
    import os.path
    import logging
    import logging.config
    import json
    from pathlib import Path
    import subprocess

script_dir=os.path.abspath(os.path.dirname(__file__))

docker_registry_host = "DOCKER_REGISTRY_HOST"
docker_registry_port = DOCKER_REGISTRY_PORT

def get_logger():
    return logging.getLogger(__name__)


def setup_logging(
    default_path='logging.json',
    default_level=logging.INFO,
    env_key='LOG_CFG'
):
    """
    Setup logging configuration
    """
    path = default_path
    value = os.getenv(env_key, None)
    if value:
        path = value
    if os.path.exists(path):
        with open(path, 'r') as f:
            config = json.load(f)
        logging.config.dictConfig(config)
    else:
        logging.basicConfig(level=default_level)

def gather_image_names():
    """
    Get the set of service images. 
    """
    services = set()
    with open('/etc/map/service-configurations.json', 'r') as f:
        service_config = json.load(f)
    for service in service_config:
        if 'imageName' in service:
            image = service['imageName']
            services.add(image)
    return services

def pull_image(image):
    cmd_result = subprocess.run(["docker", "pull", "{}:{}{}".format(docker_registry_host, docker_registry_port, image)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    cmd_result.check_returncode()
    

def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--logconfig", dest="logconfig", help="logging configuration (default: logging.json)", default='logging.json')

    args = parser.parse_args(argv)

    setup_logging(default_path=args.logconfig)

    images = gather_image_names()
    for image in images:
        pull_image(image)


if __name__ == "__main__":
    sys.exit(main())
    
